// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  password          String
  firstName         String?
  lastName          String?
  role              UserRole            @default(USER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  salesforceConfigs SalesforceConfig[]
  createdForms      Form[]              @relation("createdForms")
  formResponses     FormResponse[]
  assignedForms     FormAssignment[]    // Forms assigned to this user
  formsAssigned     FormAssignment[]    @relation("assignedForms") // Forms this user has assigned to others
  contractorProfile ContractorProfile?  // One-to-one relation with contractor profile
}

// Contractor profile for additional contractor information
model ContractorProfile {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  phone         String?
  company       String?
  street        String?
  city          String?
  state         String?
  zipCode       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SalesforceConfig {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  accessToken  String
  refreshToken String
  instanceUrl  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Form {
  id              String         @id @default(uuid())
  title           String
  description     String?
  salesforceId    String?        // Original Salesforce form ID if imported
  createdById     String
  createdBy       User           @relation(fields: [createdById], references: [id], name: "createdForms")
  status          FormStatus     @default(DRAFT)
  formItems       FormItem[]
  formResponses   FormResponse[]
  expiresAt       DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  assignedUsers   FormAssignment[] // Many-to-many relationship with users
}

model FormItem {
  id          String        @id @default(uuid())
  formId      String
  form        Form          @relation(fields: [formId], references: [id])
  label       String
  type        FormItemType
  required    Boolean       @default(false)
  order       Int
  options     Json?         // For select, radio, etc.
  validation  Json?         // Validation rules
  salesforceId String?      // Original Salesforce field ID if imported
  responses   FormItemResponse[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model FormResponse {
  id          String             @id @default(uuid())
  formId      String
  form        Form               @relation(fields: [formId], references: [id])
  submittedById String?
  submittedBy  User?             @relation(fields: [submittedById], references: [id])
  status      ResponseStatus     @default(PENDING)
  items       FormItemResponse[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model FormItemResponse {
  id            String       @id @default(uuid())
  formResponseId String
  formResponse   FormResponse @relation(fields: [formResponseId], references: [id])
  formItemId     String
  formItem       FormItem     @relation(fields: [formItemId], references: [id])
  value          Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// New model for form assignments
model FormAssignment {
  id              String         @id @default(uuid())
  formId          String
  form            Form           @relation(fields: [formId], references: [id])
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  assignedAt      DateTime       @default(now())
  assignedById    String
  assignedBy      User           @relation(fields: [assignedById], references: [id], name: "assignedForms")
  status          AssignmentStatus @default(PENDING)
  dueDate         DateTime?
  completedAt     DateTime?
  
  @@unique([formId, userId]) // Prevent duplicate assignments
}

enum UserRole {
  ADMIN
  USER
  CONTRACTOR
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormItemType {
  TEXT
  TEXTAREA
  NUMBER
  DATE
  SELECT
  MULTISELECT
  RADIO
  CHECKBOX
  FILE
}

enum ResponseStatus {
  PENDING
  SUBMITTED
  SYNCED
  ERROR
}

// Add a new enum for assignment status
enum AssignmentStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  EXPIRED
}
